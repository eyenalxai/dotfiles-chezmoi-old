#!/usr/bin/env rust-script
//! ```cargo
//! [dependencies]
//! dotenv = "0.15.0"
//! ```

use std::{
    collections::HashMap,
    env,
    fs::File,
    io::{BufRead, BufReader},
    process::Command,
};

fn main() {
    let env_vars = match load_env() {
        Ok(env_vars) => env_vars,
        Err(err) => {
            eprintln!("Error: {}", err);
            return;
        }
    };

    let args: Vec<String> = env::args().collect();
    if args.len() < 2 {
        eprintln!("Usage: renv <command> <arguments...>");
        return;
    }

    let command = &args[1];
    let command_args = &args[2..];

    let mut cmd = Command::new(command);
    cmd.args(command_args);

    for (key, value) in env_vars.iter() {
        cmd.env(key, value);
    }

    match cmd.status() {
        Ok(status) => {
            if !status.success() {
                eprintln!("Error: Command failed with status {}", status);
            }
        }
        Err(err) => {
            eprintln!("Error: Failed to execute command - {}", err);
        }
    }
}

fn load_env() -> Result<HashMap<String, String>, String> {
    let file = File::open(".env").map_err(|e| format!("Failed to open .env file - {}", e))?;
    let reader = BufReader::new(file);

    let mut env_vars = HashMap::new();

    for line in reader.lines() {
        let line = line.map_err(|e| format!("Failed to read .env file - {}", e))?;
    
        if line.trim().is_empty() {
            continue;
        }

        let mut parts = line.splitn(2, '=');
        let key = parts
            .next()
            .ok_or("Failed to parse key from .env file")?
            .trim()
            .to_owned();
        let value = parts
            .next()
            .ok_or("Failed to parse value from .env file")?
            .trim()
            .to_owned();
        env_vars.insert(key, value);
    }

    Ok(env_vars)
}

